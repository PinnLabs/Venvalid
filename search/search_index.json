{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started here","text":"<p>Minimalist environment variable validation for Python, inspired by envalid</p>"},{"location":"#about","title":"About","text":"<p>Venvalid is a minimalist and developer-friendly environment variable validator for Python \u2014 inspired by the simplicity and clarity of <code>envalid</code> from the Node.js world.</p> <p>It lets you define a schema for your environment variables and ensures they are present, well-formed, and ready to use \u2014 before your app even starts.</p>"},{"location":"#why-venvalid","title":"Why Venvalid?","text":"<p>Venvalid was designed with Python developers in mind, offering a modern, clean, and extensible API to handle <code>.env</code> configurations. It stands out from other libraries by:</p> <ul> <li>\u2705 Using Python native types (<code>str</code>, <code>bool</code>, <code>int</code>, <code>list</code>, <code>Path</code>, <code>Decimal</code>, <code>datetime</code>, etc.)</li> <li>\u2705 Supporting default values, enum constraints, and custom validation</li> <li>\u2705 Allowing custom dotenv loading with override support</li> <li>\u2705 Raising clear and styled error messages that prevent app boot on misconfig</li> <li>\u2705 Having zero external dependencies \u2014 just Python</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install venvalid\n</code></pre> <p>or</p> <pre><code>uv add venvalid\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from venvalid import str_, int_, bool_, venvalid\nfrom venvalid.dotenv import load_env_file\n\n# Define schema\nconfig = venvalid({\n    \"DEBUG\": bool_(default=False),\n    \"PORT\": int_(default=8000),\n    \"SECRET_KEY\": str_(),\n    \"ENVIRONMENT\": str_(allowed=[\"dev\", \"prod\", \"test\"], default=\"dev\"),\n})\n\nprint(config[\"DEBUG\"])        # -&gt; False\nprint(config[\"PORT\"])         # -&gt; 8000\nprint(config[\"ENVIRONMENT\"])  # -&gt; \"dev\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>You can use <code>venvalid</code> to validate configuration before mounting the app:</p> <pre><code>from fastapi import FastAPI\nfrom venvalid import str_, int_, bool_, venvalid\nfrom venvalid.dotenv import load_env_file\n\nconfig = venvalid({\n    \"DEBUG\": bool_(default=False),\n    \"PORT\": int_(default=8000),\n    \"ENVIRONMENT\": str_(allowed=[\"dev\", \"prod\", \"test\"], default=\"dev\"),\n})\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"env\": config[\"ENVIRONMENT\"],\n        \"debug\": config[\"DEBUG\"],\n        \"port\": config[\"PORT\"],\n    }\n</code></pre>"},{"location":"#supported-types","title":"Supported Types","text":"<p>You can use both built-in types and helper functions:</p> <ul> <li><code>str</code>, <code>int</code>, <code>bool</code>, <code>list</code></li> <li><code>path_()</code> \u2192 for <code>pathlib.Path</code></li> <li><code>decimal_()</code> \u2192 for <code>Decimal</code></li> <li><code>datetime_()</code> \u2192 for <code>datetime</code></li> <li><code>json_()</code> \u2192 for JSON/dict strings</li> </ul> <p>All helpers accept:</p> <ul> <li><code>default=...</code></li> <li><code>allowed=[...]</code></li> <li><code>validate=callable</code></li> </ul>"},{"location":"#advanced-options","title":"Advanced Options","text":"<pre><code>\"ENVIRONMENT\": str_(allowed=[\"dev\", \"prod\"], default=\"dev\"),\n\"FEATURE_FLAG\": bool_(default=False),\n\"API_KEY\": str_(validate=lambda v: v.startswith(\"sk-\")),\n</code></pre> <p>If any variable is missing or invalid, <code>venvalid</code> will stop execution and print a meaningful error message.</p>"},{"location":"#env-loading","title":".env Loading","text":"<p>If you want to load variables from a <code>.env</code> file (without relying on <code>python-dotenv</code>), use:</p> <pre><code>from venvalid.dotenv import load_env_file\n\nload_env_file(\".env\")             # default\nload_env_file(\".env.prod\", override=True)  # optional override\n</code></pre>"}]}